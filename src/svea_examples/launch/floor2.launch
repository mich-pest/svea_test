<?xml version="1.0"?>
<launch>

    <!-- Launch file arguments -->
    <arg name="map"         default="floor2"/>
    <arg name="is_sim"      default="true"/>
    <arg name="use_rviz"    default="true"/>
    <arg name="remote_rviz" default="false"/>
    <arg name="obstacle_map" default="floor2"/>

    <!-- Start map server -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(find svea_core)/maps/$(arg map).yaml" output="screen"/>

    <rosparam command="load" file="$(find svea_core)/params/$(arg obstacle_map).yaml" />
 
    <!-- If is_sim equal to false, then include all these tags-->
    <group unless="$(arg is_sim)">

        <!-- Start low-level interface -->
        <node name="serial_node" pkg="rosserial_python" type="serial_node.py">
            <param name="port" value="/dev/ttyACM0"/>
            <param name="baud" value="250000"/>
        </node>

        <!-- Start localization -->
        <include file="$(find svea_sensors)/launch/localize.launch"/>

    </group>

    <!-- Start RViz -->
    <node if="$(eval use_rviz and not remote_rviz)"
          name="rviz" pkg="rviz" type="rviz"
          args="-d $(find svea_core)/rviz/SVEA_floor2.rviz"/>

    <!-- Start pure_pursuit -->
    <node name="pure_pursuit" pkg="svea_examples" type="pure_pursuit.py" output="screen">
        <param name="use_rviz"  value="$(arg use_rviz)"/>
        <param name="is_sim"    value="$(arg is_sim)"/>
        <!-- Waypoints for floo2 map -->
        <!-- <rosparam>
            state: [-7.4, -15.3, 0.9] # initial state (x, y, yaw)
            points:
            - [-2.3, -7.1]  # Bottom right (project room)
            - [10.5, 11.7]  # Top right
            - [5.7, 15.0]   # Top left
            - [-7.0, -4.0]  # Bottom left
            obstacles_points:
            - [3.9, 3.0]
            - [2, 2]
            - [-2, 5]
        </rosparam> -->
        <!-- Waypoints for sml map -->
        <!-- <rosparam>
            state: [1.4, -1.7, 0.9] # initial state (x, y, yaw)
            points:
            - [1.9, 1.43]
            - [-1.44, 1.96]
            - [-1.45, -1.48]
            - [1.4, -1.7]
            obstacles_points:
            - [-0.85, 0.9]
        </rosparam> -->
        <rosparam>
            state: [-1.9, -2, 1.7] # initial state (x, y, yaw)
            points:
            - [-1.9, 1.4]
            - [0, 1.4]
            obstacles_points:
            - [0, 1.5]
        </rosparam> 
    </node>

</launch>

